const request = require('request');
const cheerio = require('cheerio');
const { version } = require('../package.json');

const neko = request.defaults({
  baseUrl: `https://nekos.life/api/v2/`
});

const mal = request.defaults({
  baseUrl: `https://myanimelist.net/profile/`
});

const malAnimeList = request.defaults({
  baseUrl: `https://myanimelist.net/animelist/`
});

const malMangaList = request.defaults({
  baseUrl: `https://myanimelist.net/mangalist/`
});

const kitsu = request.defaults({
  baseUrl: `https://kitsu.io/api/edge/`,
  userAgent: `kitsu.js, a npm module for the kitsu.io API. v${version} (https://github.com/freezegr/anime.js)`,
  options: {
    headers: {
      'User-Agent': `kitsu.js, a npm module for the kitsu.io API. v${version} (https://github.com/freezegr/anime.js)`,
      Accept: 'application/vnd.api+json',
      'Content-Type': 'application/vnd.api+json'
    }
  }
});

/**
 * Returns array of anime
 * @param {string} search - Anime name
 * @param {(string|number)} [maxResult=max] - Max result.
 *
 * @return {Promise} Promisen array of anime
 */

module.exports.animeSearch = (search, maxResult = "max") => {
  if(!search)throw new Error('[Anime.js: no search]');
  return new Promise((resolve) => {
    let page = 0;
    let searchTerm = encodeURIComponent(search);
    kitsu.get(`anime?filter[text]="${searchTerm}"&page[offset]=${page}`, (err, response, body) => {
	  const res = JSON.parse(body)
      const cb = () => {
        if(maxResult > res.data.length) maxResult = res.data.length;
		if(maxResult == "max") maxResult = res.data.length;	
		
		let results = [];
		
		for(let i = 0; i < maxResult; i++){
          results.push(res.data[i])
        }
		return results
      };
	  resolve(cb())
    });
  })
};

/**
 * Returns array of manga
 * @param {string} search - Manga name
 * @param {(string|number)} [maxResult=max] - Max result.
 *
 * @return {Promise} Promisen array of manga
 */

module.exports.mangaSearch = (search, maxResult = "max") => {
  if(!search)throw new Error('[Anime.js: no search]');
  return new Promise((resolve) => {
    let page = 0;
    const searchTerm = encodeURIComponent(search);
    kitsu.get(`manga?filter[text]="${searchTerm}"&page[offset]=${page}`, (err, response, body) => {
	  const res = JSON.parse(body)
      const cb = () => {
        if(maxResult > res.data.length) maxResult = res.data.length;
        if(maxResult == "max") maxResult = res.data.length;
		
        let results = []

        for(let i = 0; i < maxResult; i++){
		  results.push(res.data[i])
        }
        return results
      }
      resolve(cb())
    })
  });
};

/**
 * @param {string} cat - The category of nsfw.
 * @return {Promise} Promisen string the image url.
 */

module.exports.nekoNsfw = (cat) => {
  if (!cat) throw new Error('[Anime.js: no category]');
  return new Promise((resolve) => {
    const nsfw = require('./nsfw.json');
    if (!nsfw[cat]) throw new Error(`[Anime.js: ${cat} is invalid category]`);

    neko.get(nsfw[cat], (err, res, body) => {
      resolve(JSON.parse(body))
    });
  });
}

/**
 * @param {string} cat - The category of sfw.
 * @return {Promise} Promise string the image url.
 */

module.exports.nekoSfw = (cat) => {
  if (!cat) throw new Error('[Anime.js: no category]');
  return new Promise((resolve) => {
    const nsfw = require('./nsfw.json');
    if (!nsfw[cat]) throw new Error(`[Anime.js: ${cat} is invalid category]`);

    neko.get(nsfw[cat], (err, res, body) => {
      resolve(JSON.parse(body))
    });
  });
}

/**
 * @return {Promise} Promise string the image url.
 */

module.exports.wallpaper = () => {
  return new Promise((resolve) => {
    neko.get('/img/wallpaper', (err, res, body) => {
	  resolve(JSON.parse(body))
	});
  });
}
/**
 * @param {string} username.
 * @return {Promise} Promise string the image url.
 */

const getAnimeList = (username = 'freezegr') => {
  if (!username) throw new Error('[Anime.js: no username]');
  return new Promise((resolve) => {
    let animes = { watching: [], completed: [], dropped: [], onhold: [], planToWatch: [] };
    let count = 0

    /**
     * @param {number} offset.
     * @return {JSON} anime list per page 
     */

    const getAnimeListLoop = (offset = 0) => {
      malAnimeList.get(`${username}/load.json?offset=${offset}&status=7}`, (err, response, body) => {
        let res = JSON.parse(body);
        if (res.length == 0) return resolve(animes)
        if (body == '{"errors":[{"message":"invalid request"}]}') return resolve([])
			
	    animes.watching.push(...res.filter(x => x.status == 1))
	    animes.completed.push(...res.filter(x => x.status == 2))
	    animes.onhold.push(...res.filter(x => x.status == 3))
	    animes.dropped.push(...res.filter(x => x.status == 4))
	    animes.planToWatch.push(...res.filter(x => x.status == 6))
		
        count = count + 300
        getAnimeListLoop(count)
      });
    };
    getAnimeListLoop()
  });
};

module.exports.getAnimeList = getAnimeList


const getMangaList = (username) => {
  if (!username) throw new Error('[Anime.js: no username]');
  return new Promise((resolve) => {
    let mangas = { reading: [], completed: [], dropped: [], onhold: [], planToRead: []};
	let count = 0
	/**
     * @param {number} offset.
     * @return {JSON} anime list per page 
     */

    const getAnimeListLoop = (offset = 0) => {
      malMangaList.get(`${username}/load.json?offset=${offset}&status=7}`, (err, response, body) => {
        let res = JSON.parse(body);
        if (res.length == 0) return resolve(mangas)
        if (body == '{"errors":[{"message":"invalid request"}]}') return resolve({error: 'user not found'})
        
        mangas.reading.push(...res.filter(x => x.status == 1))
	    mangas.completed.push(...res.filter(x => x.status == 2))
	    mangas.onhold.push(...res.filter(x => x.status == 3))
	    mangas.dropped.push(...res.filter(x => x.status == 4))
	    mangas.planToRead.push(...res.filter(x => x.status == 6))
        count = count + 300
        getAnimeListLoop(count)
      });
    };
	getAnimeListLoop()
  });
};

module.exports.getMangaList = getMangaList

module.exports.myAnimeList = (username = 'lef0') => {
  if (!username) throw new Error('[Anime.js: no username]');
  return new Promise((resolve) => {
    mal.get(username, (err, res, body) => {
      const $ = cheerio.load(body);
      let UserNotFound = $('div[class="error404"]')
      if (UserNotFound.length != 0) return resolve({error: 'user not found'})
      let result = {};

      result.username = username
      result.user_pfp = Object.values($('div[class="user-image mb8"]').find('img')[0].attribs)[1]

      let infoUser = $('ul[class="user-status border-top pb8 mb4"] > li[class="clearfix"]').find('span').toArray()
      for (let i = 0; i < infoUser.length; i++) {
        switch ($(infoUser[i]).html()) {
          case "Gender":
            result.gender = $(infoUser[i + 1]).html()
            break;
          case "Birthday":
            result.birthday = $(infoUser[i + 1]).html()
            break;
          case "Last Online":
            result.last_online = $(infoUser[i + 1]).html()
            break;
          case "Location":
            result.location = $(infoUser[i + 1]).html()
            break;
          case "Joined":
            result.joined = $(infoUser[i + 1]).html()
            break;
        }
      }

      result.animeStats = {}
      result.mangaStats = {}
      result.favorite = {}
      result.favorite.anime = []
      result.favorite.manga = []
      result.favorite.characters = []
      result.favorite.people = []
      result.friends = []

      let mangaStatus = false
      $('ul[class="stats-status fl-l"] > li').toArray().forEach(x => {
        let args = $(x).text().replace(/ +/g, "").replace("-", "").replace(/[^0-9](?=[0-9])/g, '$& ').split(/ +/)
        if (mangaStatus) return result.mangaStats[args[0]] = args[1]
        if (args[0] == 'PlantoWatch') mangaStatus = true
        result.animeStats[args[0]] = args[1]
      });

      $('ul[class="favorites-list anime"] > li').toArray().forEach(x => {
        result.favorite.anime.push({
          name: $(x).find('div[class="di-tc va-t pl8 data"] > a').html(),
          url: $(x).find('div[class="di-tc va-t pl8 data"] > a')[0].attribs.href,
          image: $(x).find('div[class="di-tc"] > a > img')[0].attribs.src
        })
      });

      $('ul[class="favorites-list manga"] > li').toArray().forEach(x => {
        result.favorite.manga.push({
          name: $(x).find('div[class="di-tc va-t pl8 data"] > a').html(),
          url: $(x).find('div[class="di-tc va-t pl8 data"] > a')[0].attribs.href,
		  image: $(x).find('div[class="di-tc"] > a > img')[0].attribs.src
        })
      });

      $('ul[class="favorites-list characters"] > li').toArray().forEach(x => {
        result.favorite.characters.push({
          name: $(x).find('div[class="di-tc va-t pl8 data"] > a').html(),
          url: $(x).find('div[class="di-tc va-t pl8 data"] > a')[0].attribs.href,
		  image: $(x).find('div[class="di-tc"] > a > img')[0].attribs.src
        })
      });

      $('ul[class="favorites-list people"] > li').toArray().forEach(x => {
        result.favorite.people.push({
          name: $(x).find('div[class="di-tc va-t pl8 data"] > a').html(),
          url: $(x).find('div[class="di-tc va-t pl8 data"] > a')[0].attribs.href,
		  image: $(x).find('div[class="di-tc"] > a > img')[0].attribs.src
        })
      });

      request(`https://myanimelist.net/profile/${username}/friends`, (err, res, htmlBody) => {
        let _ = cheerio.load(htmlBody);
          _('div[class="majorPad"] > div').toArray().forEach(x => {
		    result.friends.push	({
			  name: $(x).find('div > a > strong').html(),
			  url: `https://myanimelist.net/profile/${$(x).find('div > a > strong').html()}`,
			  image: $(x).find('div > a > img')[0].attribs.src
			})
		});
      });
	  resolve(result)
    });
  });
};

